
Message format:
Little endian integers

{
uint32 head
* message
}
code = head >> 20         ( 12 bits )
length = head & 0xfffff   ( 20 bits )

length is message length after head.
a "packet" is minimum of a 4 byte head + 0 length message

messages:
(C>S) client to server
(S>C) server to client
(S>S) server to server
code / min length / max length - description \n psudo format
0x000 / 0 / 0 - keepalive
0x010 / 0 / 16 - ping
0x011 / 0 / 0 - reqest accessable objects (C>S)
0x080 / 6 / 1300 - send object message (C>S, S>C, S>S)
 uint32 id
 uint16 msg[ (len - 4) / 2 ]
0x0E0 / 6 / 1300 - sync memory address 16 (S>C, S>S)
 uint32 id
 uint16 baseindex
 uint32 data[ (len - 6) / 4 ]
 // assumes memory is array of 32 bit words for index and data
0x0E1 / 8 / 1300 - sync memory address 32 (S>C, S>S)
 uint32 id
 uint16 baseindex
 uint32 data[ (len - 8) / 4 ]
 // assumes memory is array of 32 bit words for index and data
0x0E2 / 4 / 1300 - sync run volitile state (S>C, S>S)
 uint32 id
 uint8 data[len - 4]
0x0E3 / 4 / 1300 - sync session volitile state (S>C, S>S)
 uint32 id
 uint8 data[len - 4]
0x200 / 1300 / 1300 - response accessable objects (S>C)
 // sent with long list or continuation
 { uint32 id; uint32 type; }[len / 8]
 // array of object info structs
0x201 / 0 / 1300 - last response accessable objects (S>C)
 // sent at/with end of list
 { uint32 id; uint32 type; }[len / 8]
 // array of object info structs

